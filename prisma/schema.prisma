generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Users {
  id                   String              @id @default(uuid())
  username             String              @unique
  email                String              @unique
  faculty              String
  department           String              @default("default_department")
  password             String
  passwordResetToken   String?
  passwordResetExpires DateTime?
  uploadedModules      Modules[]
  votes                ModuleVoteRecords[]
  comments             Comments[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
}

model ModuleVoteRecords {
  id       String   @id @default(uuid())
  voteType VoteType
  userId   String
  moduleId String
  user     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Modules  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

model Modules {
  id          String              @id @default(uuid())
  title       String
  faculty     String
  department  String
  course      String
  description String
  filePath    String?
  upVote      Int                 @default(0)
  downVote    Int                 @default(0)
  userId      String?
  votes       ModuleVoteRecords[]
  comments    Comments[]
  user        Users?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now())
}

model Lecturers {
  id         String     @id @default(uuid())
  name       String
  faculty    String
  department String
  upVote     Int        @default(0)
  downVote   Int        @default(0)
  comments   Comments[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  rating     Float      @default(0)
}

model Comments {
  id         String     @id @default(uuid())
  feedback   String
  rating     Int
  userId     String
  moduleId   String?
  lecturerId String?
  user       Users      @relation(fields: [userId], references: [id])
  module     Modules?   @relation(fields: [moduleId], references: [id])
  lecturer   Lecturers? @relation(fields: [lecturerId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
}